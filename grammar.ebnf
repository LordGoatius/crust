(* NOTE: Tokens can be found in the spec file *)
translation-unit = declaration*

declaration = function-declaration
            | function-definition
            | type-definiton
            | static-variable-declaration
            ;

type-specifier = "u8"
               | "u16"
               | "u32"
               | "u64"
               | "usize"
               | "i8"
               | "i16"
               | "i32"
               | "i64"
               | "isize"
               | "z8"
               | "z16"
               | "z32"
               | "z64"
               | "zsize"
               | "f32"
               | "f64"
               | "c32"
               | "c64"
               | "bool"
               | "struct", ident,
               | "enum", ident,
               | "union", ident,
               | tuple-def
               | array-def
               | user-type (* pretty sure this is context dependent *)
               | type-specifier, "*", (* NOTE: ptrs :) *)
               ;

tuple-def = "(", [ type-specifier ], { ",", type-specifier }, ")", ";" ;

array-def = type-specifier, [ "[", number, "]", ], { "[", number, "]", };

type-qualifier = "static" ;

type-definition = (( "struct", ident, "{", { ident, type-specifier, ";" }, "}" )
                 | ( "union",  ident, "{", { ident, type-specifier, ";" }, "}" )
                 | ( "enum",   ident, "{", { ident, [ type-specifier ], "," }, "}" )), ";" ;
                 | "typedef", type-specifier, ident ), ";" ;

type-instantiation = ( expression
                     | array-instantiation
                     | tuple-instantiation
                     | struct-instantiation
                     | enum-instantiation
                     | pointer-instantiation
                     ) ;

expression = ( binary-op
      | unary-op
      | ident
      | function-call
      | conditional   (* conditionals are binops or unops *)
      | literal       (* number literal *)
      | "(", expression, ")"),;

literal = string-literal
        | ptr-literal
        | int-literal
        | float-literal
        | gaussian-literal
        | complex-literal
        | bool-literal ;

binary-op = expression, op, expression ;
conditional = binary-op | unary-op ; (* this is true, just only with logical operators.
                                        nevertheless, for the parser, this is okay, everything 
                                        else will be handled in the type checker *)

unary-op  = op, ( ident | literal )
          | op, "(", expression, ")" ;
function-call = ident, "(", [ expression ], { ",", expression }, ")" ;

array-instantiation = "[", [ type-instantiation ], { ",", type-instantiation }, "]" ;
tuple-instantiation = "(", [ type-instantiation ], { ",", type-instantiation }, ")" ;

struct-instantiation = "{", { ident, "=", type-instantiation }, "}" ;
enum-instantiation   = ident, [ type-instantiation ] ;

pointer-instantiation = "null" | ( "&", ident ) | int-literal ;

variable-declaration = 
    type-specifier, ident [ "=", type-instantiation ], { ",", ident, [ "=", type-instantiation ] }, ";" ;

static-variable-declaration = "static", variable-declaration ;

function-declaration = 
    type-specifier, ident, "(", [ type-specifier, ident ], { ",", type-specifier, ident }, ")", ";" ;

code-block-body = statement* ;

function-definition = function-declaration, code-block-body ;

statement = variable-declaration
          | variable-assignment
          | shortcut-assignment
          | if-statement
          | while-statement
          | for-statement
          | return-statement
          | match-statement
          | if-let-statement ;

variable-assignment = ident, "=", expression, ";" ;
shortcut-assignment = ident, ( "+=",
                               "-=",
                               "*=",
                               "\=",
                               "%=",
                               ">>=",
                               "<<=",
                               "&=",
                               "|=",
                               "^=" ), expression, ";" ;

if-statement = "if", "(", expression, ")", "{", code-block-body, "}",
     { "else", "if", "(", expression, ")", "{", code-block-body, "}" },
     [ "else", "{", code-block-body, "}" ] ;

while-statement = "while", "(", expression, ")", "{", code-block-body, "}" ;
for-statement   = "for", "(", [ variable-assignment ], ";", 
                              [ expression ],  ";", 
                              [ expression ], ")", "{", code-block-body, "}" ;
return-statement = "return", expression, ";" ;
match-statement  = "match", expression, "{", { match-clause }, "}" ;
match-clause     = type-instantiation, ":", "{", code-block-body, "}", "," ;
if-let-statement = "if", "let", type-instantiation, "=" expression, "{", code-block-body, "}"
                  [ "else", "{", code-block-body, "}", ] ;
